<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="put-template.xml" />
	<munit:before-test name="put-template-before-test" doc:id="6b84e0f9-8eff-4133-8dba-a961edf5460d" >
		<munit-tools:mock-when doc:name="Exists Template in OS" doc:id="74e3f9d4-68ab-4065-9692-98d4d7af2f65" processor="os:contains">
			<munit-tools:with-attributes >
				<munit-tools:with-attribute whereValue="Exists Template in OS" attributeName="doc:name" />
			</munit-tools:with-attributes>
			<munit-tools:then-return >
				<munit-tools:payload value="#[true]" />
			</munit-tools:then-return>
		</munit-tools:mock-when>
		<munit-tools:mock-when doc:name="Remove Template" doc:id="bf0332cd-ba2d-4f92-843e-8d86e3a853d5" processor="os:remove">
			<munit-tools:with-attributes >
				<munit-tools:with-attribute whereValue="Remove Template" attributeName="doc:name" />
			</munit-tools:with-attributes>
		</munit-tools:mock-when>
		<munit-tools:mock-when doc:name="Store Template" doc:id="3e6a8c79-623e-48c6-b3f5-90fce1dc7b98" processor="os:store">
			<munit-tools:with-attributes >
				<munit-tools:with-attribute whereValue="Store Template" attributeName="doc:name" />
			</munit-tools:with-attributes>
		</munit-tools:mock-when>
	</munit:before-test>
	<munit:test name="put-templat-remove-insert-template-test" doc:id="b4edd4cb-c694-4009-8651-dfe67853a345" >
		<munit:execution >
			<flow-ref doc:name="Upsert Template" doc:id="e3d1bd9b-bb94-49b5-b25f-54e040e21d24" name="put:\template:main-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert Http Status" doc:id="70aa9466-a5ae-44df-b28f-a497d64043ca" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
vars.httpStatus must equalTo(204)]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Remove Template" doc:id="f6c63560-e551-4a7d-9276-e800f97ba83d" processor="os:remove" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Remove Template" attributeName="doc:name" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="put-templat-insert-template-test" doc:id="8b3bb4d4-d71b-4cb3-a7c6-85fdb25f54d3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Exists Template in OS" doc:id="df21e755-a8e5-4d5c-bb6d-f8957c218aee" processor="os:contains">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Exists Template in OS" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[false]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Upsert Template" doc:id="d63e76b4-96cc-4fad-93a6-ebe33e33d1b1" name="put:\template:main-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert Http Status" doc:id="f680dbbc-4f2a-43c8-8a65-e38065d1e28a" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
vars.httpStatus must equalTo(204)]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Insert template" doc:id="e86a3642-3781-4d19-a344-153904d9ff20" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Insert template" attributeName="doc:name" />
				</munit-tools:with-attributes>

			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="put-template-os-error" doc:id="325b9eb1-5584-4da5-b598-e202fb33c720" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Exists Template in OS" doc:id="15d3ea3c-c3f2-48de-a0bc-4eba79c1322c" processor="os:contains">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Exists Template in OS" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:error typeId="OS:STORE_NOT_AVAILABLE" />
				</munit-tools:then-return>
			
</munit-tools:mock-when>
		</munit:behavior>
		<munit:execution >
			<try doc:name="Try" doc:id="12774d2a-0879-4e06-a825-edf9070161e5" >
				<flow-ref doc:name="Upsert Template" doc:id="d4d378f5-b48f-4cf7-b308-a5213c4b4699" name="put:\template:main-config" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="7489341a-3c0f-4bf8-a0fd-1a5776050339" />
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Valid Response" doc:id="d0137be9-bd6c-4ea0-a5e2-4d9e5e18f2e1" >
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload must equalTo(modules::PutTemplateTest::errorOSTemplate)]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>


</mule>
